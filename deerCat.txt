# Deer, Cat and Wolf

# This is a tutorial for our programs using TriangleMesh.

# Set the materials
# 1 light source
# others are diffusive
# spaces are not relevant,

material red_wall   (diffuse(uniform(<red>)),   uniform(<black>))
material green_wall (diffuse(uniform(<green>)), uniform(<black>))
material white_mat (diffuse(uniform(<white>)), uniform(<black>))
material yell (diffuse(uniform(<yellow>)), uniform(<black>))

# Light Source. The correct syntax of this element consists in calling the
# exact type of the material and light you want to reproduce

material light_mat (diffuse(uniform(<0.8, 0.8, 0.8>)), uniform(<1.0, 1.0, 0.784>))


# The coloured lateral walls are planes
# The syntax for the plane consists in the material and transformation (translation, rotation and scaling,
# generated by the vector written between [])

plane (green_wall,
       translation([0 , 0 , 0])
       )

# The light
# The syntax for the sphere is similar, you have to specify the material and the transformation

sphere(
	light_mat,
	scaling([50, 50, 50])
	)

# Deer
# Let's implement TriangleMeshes! First of all tou have to pass the material, the transformation as the other shapes,
# and after that there's the need to pass the name of file .txt without the extension (cause of the limitations
# of our compiler)

#fileshape(
  #        red_wall,
   #       #translation([-0.25, 0, 0.25]) * rotationZ(180) * rotationX(90) * scaling([0.5, 0.5, 0.5]),
    #      scaling([1.5, 1.5, 1.5]) * rotationX(90) * translation([1, 0.5, 0]) * rotationY(45),
     #     deer
#)

#cat
#fileshape(
   #       yell,
  #        scaling([1, 1, 1]) * rotationX(90) * rotationY(45) * scaling([0.6, 0.15, 0.15]),
 #         cat
#)

fileshape(
          white_mat,
          scaling([0.6, 0.9, 0.6]) * rotationX(90) * translation([1.5, 0.5, 0.5]) * rotationY(90) ,
          wolf
)

# Set the camera
# Once you have set al the shapes, you have to specify the type of the projection (orthogonal or perspective)
# and the transformation of the camera
camera(perspective, translation([0, 0, 1]), 1.0, 1.0)