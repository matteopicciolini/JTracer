# Triangle

# This is a tutorial for our programs using Triangles.

# Set the materials
# 1 light source
# others are diffusive
# spaces are not relevant,

material red_wall   (diffuse(uniform(<red>)),   uniform(<black>))
material green_wall (diffuse(uniform(<green>)), uniform(<black>))
material white_mat (diffuse(uniform(<white>)), uniform(<black>))
material yell (diffuse(uniform(<yellow>)), uniform(<black>))
material mirror (diffuse(uniform(<navy>)), uniform(<black>))

# Checkered material. In order to use it, you have to specify the brdf with the checkered pigment,
# made of two colors and the number of the patterns

material check (diffuse(checkered(<white>, <yellow>, 4)), uniform(<black>))

# Light Source. The correct syntax of this element consists in calling the
# exact type of the material and light you want to reproduce

material light_mat (diffuse(uniform(<0.8, 0.8, 0.8>)), uniform(<1.0, 1.0, 0.784>))


# The coloured lateral walls are planes
# The syntax for the plane consists in the material and transformation (translation, rotation and scaling,
# generated by the vector written between [])

plane (check,
       translation([0 , 0 , 0])
       )

# The light
# The syntax for the sphere is similar, you have to specify the material and the transformation

sphere(
	light_mat,
	scaling([50, 50, 50])
	)

# Triangle
# The syntax for creating triangles is the following:
# Specify the three vertices written between []
# specify the transformation
# specify the material

triangle(
    [0, 0, 0.5],
    [0, 0.5, 0.1],
    [0, -0.5, 0.1],
    yell,
    translation([0, 0, 0])
)
# Let's add triangles to our world!

# Set the camera
# Once you have set al the shapes, you have to specify the type of the projection (orthogonal or perspective)
# and the transformation of the camera
camera(perspective, translation([0, 0, 1]), 1.0, 1.0)